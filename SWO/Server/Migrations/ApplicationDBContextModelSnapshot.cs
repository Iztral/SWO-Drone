// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SWO.Server.Data;

namespace SWO.Server.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    partial class ApplicationDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0-rc.2.20475.6");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "f5b7c2c8-1ed7-421c-babb-d304d1904acd",
                            ConcurrencyStamp = "84b802fb-8d58-4c10-bb83-c573e1a8e623",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "8a3f11a8-c2e6-44f0-be52-d9df0fa1a105",
                            ConcurrencyStamp = "fb2b1eb2-4f9b-499f-9218-72ce2a7b17ad",
                            Name = "Instructor",
                            NormalizedName = "INSTRUCTOR"
                        },
                        new
                        {
                            Id = "9d0bb5f4-ebcf-402d-97e6-9a7ba62e408c",
                            ConcurrencyStamp = "68e07141-0639-4d36-a430-759d45fd7557",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SWO.Models.DataModels.Grade", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Addendum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Points")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("SimulationID")
                        .HasColumnType("int");

                    b.Property<int>("TemplateID")
                        .HasColumnType("int");

                    b.Property<int>("TimeTaken")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("ID");

                    b.HasIndex("SimulationID");

                    b.HasIndex("TemplateID");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("SWO.Models.DataModels.GradeTemplate", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxPoints")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OptimalTime")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int?>("Phase")
                        .HasColumnType("int");

                    b.Property<int>("SimulatorID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("SimulatorID");

                    b.ToTable("GradeTemplates");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Description = "poziomy równy spąg",
                            MaxPoints = 2,
                            Name = "LKP-903.1.1",
                            OptimalTime = 6,
                            SimulatorID = 1
                        },
                        new
                        {
                            ID = 2,
                            Description = "organ roboczy położony na spągu",
                            MaxPoints = 2,
                            Name = "LKP-903.1.2",
                            OptimalTime = 13,
                            SimulatorID = 1
                        },
                        new
                        {
                            ID = 3,
                            Description = "ustawnie dźwigni w pozycji neutralnej",
                            MaxPoints = 2,
                            Name = "LKP-903.1.3",
                            OptimalTime = 8,
                            SimulatorID = 1
                        },
                        new
                        {
                            ID = 4,
                            Description = "jeżeli nie jest to miejsce parkowania to włączone światła",
                            MaxPoints = 2,
                            Name = "LKP-903.1.4",
                            OptimalTime = 0,
                            SimulatorID = 1
                        },
                        new
                        {
                            ID = 5,
                            Description = "zaciągnięcie hamulca postojowego HAP",
                            MaxPoints = 3,
                            Name = "LKP-903.1.5",
                            OptimalTime = 20,
                            SimulatorID = 1
                        },
                        new
                        {
                            ID = 6,
                            Description = "odpięcie pasów bezpieczeństwa",
                            MaxPoints = 0,
                            Name = "LKP-903.1.6",
                            Note = "Sytuacja wymagana",
                            OptimalTime = 12,
                            SimulatorID = 1
                        },
                        new
                        {
                            ID = 7,
                            Description = "zgaszenie maszyny",
                            MaxPoints = 1,
                            Name = "LKP-903.1.7",
                            OptimalTime = 8,
                            SimulatorID = 1
                        },
                        new
                        {
                            ID = 8,
                            Description = "założenie okularów ochronnych przed wyjściem z maszyny",
                            MaxPoints = 1,
                            Name = "LKP-903.1.8",
                            OptimalTime = 8,
                            SimulatorID = 1
                        },
                        new
                        {
                            ID = 9,
                            Description = "zabranie aparatu ucieczkowego",
                            MaxPoints = 2,
                            Name = "LKP-903.1.9",
                            OptimalTime = 4,
                            SimulatorID = 1
                        },
                        new
                        {
                            ID = 10,
                            Description = "podklinowanie maszyny",
                            MaxPoints = 3,
                            Name = "LKP-903.1.10",
                            OptimalTime = 15,
                            SimulatorID = 1
                        },
                        new
                        {
                            ID = 11,
                            Description = "postój w wyznaczonym miejscu (swobodny załadunek obudowy)",
                            MaxPoints = 3,
                            Name = "SWKF.1.1",
                            OptimalTime = 1,
                            SimulatorID = 2
                        },
                        new
                        {
                            ID = 12,
                            Description = "brak wyznaczonego miejsca, maszyna pozostaje na włączonych światłach",
                            MaxPoints = 2,
                            Name = "SWKF.1.2",
                            OptimalTime = 13,
                            SimulatorID = 2
                        },
                        new
                        {
                            ID = 13,
                            Description = "maksymalne opuszczenie organu roboczego",
                            MaxPoints = 2,
                            Name = "SWKF.1.3",
                            OptimalTime = 17,
                            SimulatorID = 2
                        },
                        new
                        {
                            ID = 14,
                            Description = "ustawnie dźwigni w pozycji neutralnej",
                            MaxPoints = 2,
                            Name = "SWKF.1.4",
                            OptimalTime = 12,
                            SimulatorID = 2
                        },
                        new
                        {
                            ID = 15,
                            Description = "jeżeli nie jest to miejsce parkowania to włączone światła",
                            MaxPoints = 2,
                            Name = "SWKF.1.5",
                            OptimalTime = 7,
                            SimulatorID = 2
                        },
                        new
                        {
                            ID = 16,
                            Description = "zaciągnięcie hamulca postojowego HAP",
                            MaxPoints = 2,
                            Name = "SWKF.1.6",
                            OptimalTime = 12,
                            SimulatorID = 2
                        },
                        new
                        {
                            ID = 17,
                            Description = "odpięcie pasów bezpieczeństwa",
                            MaxPoints = 0,
                            Name = "SWKF.1.7",
                            Note = "Sytuacja wymagana",
                            OptimalTime = 16,
                            SimulatorID = 2
                        },
                        new
                        {
                            ID = 18,
                            Description = "zgaszenie maszyny",
                            MaxPoints = 1,
                            Name = "SWKF.1.8",
                            OptimalTime = 3,
                            SimulatorID = 2
                        },
                        new
                        {
                            ID = 19,
                            Description = "założenie okularów ochronnych przed wyjściem z maszyny lub wyjście w goglach",
                            MaxPoints = 1,
                            Name = "SWKF.1.9",
                            OptimalTime = 11,
                            SimulatorID = 2
                        },
                        new
                        {
                            ID = 20,
                            Description = "zabranie aparatu ucieczkowego",
                            MaxPoints = 2,
                            Name = "SWKF.1.10",
                            OptimalTime = 10,
                            SimulatorID = 2
                        },
                        new
                        {
                            ID = 21,
                            Description = "podklinowanie maszyny",
                            MaxPoints = 3,
                            Name = "SWKF.1.11",
                            OptimalTime = 4,
                            SimulatorID = 2
                        },
                        new
                        {
                            ID = 22,
                            Description = "poziomy równy spąg",
                            MaxPoints = 2,
                            Name = "SWW.1.1",
                            OptimalTime = 8,
                            SimulatorID = 3
                        },
                        new
                        {
                            ID = 23,
                            Description = "maksymalne opuszczenie organu roboczego ",
                            MaxPoints = 2,
                            Name = "SWW.1.2",
                            OptimalTime = 10,
                            SimulatorID = 3
                        },
                        new
                        {
                            ID = 24,
                            Description = "ustawnie dźwigni w pozycji neutralnej",
                            MaxPoints = 2,
                            Name = "SWW.1.3",
                            OptimalTime = 17,
                            SimulatorID = 3
                        },
                        new
                        {
                            ID = 25,
                            Description = "jeżeli nie jest to miejsce parkowania to włączone światła",
                            MaxPoints = 2,
                            Name = "SWW.1.4",
                            OptimalTime = 13,
                            SimulatorID = 3
                        },
                        new
                        {
                            ID = 26,
                            Description = "zaciągnięcie hamulca postojowego HAP",
                            MaxPoints = 3,
                            Name = "SWW.1.5",
                            OptimalTime = 3,
                            SimulatorID = 3
                        },
                        new
                        {
                            ID = 27,
                            Description = "odpięcie pasów bezpieczeństwa",
                            MaxPoints = 0,
                            Name = "SWW.1.6",
                            Note = "Sytuacja wymagana",
                            OptimalTime = 16,
                            SimulatorID = 3
                        },
                        new
                        {
                            ID = 28,
                            Description = "zgaszenie maszyny",
                            MaxPoints = 1,
                            Name = "SWW.1.7",
                            OptimalTime = 1,
                            SimulatorID = 3
                        },
                        new
                        {
                            ID = 29,
                            Description = "założenie okularów ochronnych przed wyjściem z maszyny",
                            MaxPoints = 1,
                            Name = "SWW.1.8",
                            OptimalTime = 20,
                            SimulatorID = 3
                        },
                        new
                        {
                            ID = 30,
                            Description = "zabranie aparatu ucieczkowego",
                            MaxPoints = 2,
                            Name = "SWW.1.9",
                            OptimalTime = 4,
                            SimulatorID = 3
                        },
                        new
                        {
                            ID = 31,
                            Description = "podklinowanie maszyny",
                            MaxPoints = 3,
                            Name = "SWW.1.10",
                            OptimalTime = 6,
                            SimulatorID = 3
                        });
                });

            modelBuilder.Entity("SWO.Models.DataModels.Instructor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("Instructors");
                });

            modelBuilder.Entity("SWO.Models.DataModels.Location", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Address = "ul. Henryka Dąbrowskiego 50\n59-100 Polkowice\nPolska",
                            Description = "Zakłady Górnicze „Rudna” to jedna z największych głębinowych kopalń rudy miedzi na świecie. Jej budowę rozpoczęto we wrześniu 1969 roku, a w lipcu 1974 roku kopalnia osiągnęła 25% projektowanego wydobycia i została oficjalnie przekazana do eksploatacji.",
                            Name = "Oddział Zakłady Górnicze „Rudna”",
                            Website = "https://kghm.com/pl/biznes/wydobycie-i-wzbogacanie/rudna"
                        },
                        new
                        {
                            ID = 2,
                            Address = "ul. M. Skłodowskiej-Curie 188\n59-301 Lubin\nPolska",
                            Description = "Zakłady Górnicze Lubin to najstarsza kopalnia w polskim Zagłębiu Miedziowym. Wydobywana w nich polimetaliczna ruda zawiera głównie miedź oraz srebro.",
                            Name = "Zakłady Górnicze „Lubin”",
                            Website = "https://kghm.com/pl/biznes/wydobycie-i-wzbogacanie-sx-ew/lubin"
                        },
                        new
                        {
                            ID = 3,
                            Address = "C-115-B, Taltal,\nRegión de Antofagasta\nChile",
                            Description = "Kopalnia Franke znajduje się w południowej części regionu Antofagasta, który jest największym chilijskim zagłębiem miedziowym.",
                            Name = "Minera Franke Sociedad Contractual",
                            Website = "https://kghm.com/pl/biznes/wydobycie-i-wzbogacanie-sx-ew/franke"
                        });
                });

            modelBuilder.Entity("SWO.Models.DataModels.Member", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentityID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("SWO.Models.DataModels.Scenario", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxGradeSum")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SimulatorID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("SimulatorID");

                    b.ToTable("Scenarios");
                });

            modelBuilder.Entity("SWO.Models.DataModels.ScenarioGradesTemplates", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Assigned")
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("ScenarioID")
                        .HasColumnType("int");

                    b.Property<int>("TemplateID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ScenarioID");

                    b.HasIndex("TemplateID");

                    b.ToTable("ScenarioGradesTemplates");
                });

            modelBuilder.Entity("SWO.Models.DataModels.Sensor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Addendum")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SimulatorID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("SimulatorID");

                    b.ToTable("Sensors");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Category = "Pulpit operatora",
                            Name = "Przyciski odłącznika akumulatorów",
                            SimulatorID = 1
                        },
                        new
                        {
                            ID = 2,
                            Category = "Pulpit operatora",
                            Name = "Przycisk (niebieski) – (światła pomocnicze) – reflektor „tamy”",
                            SimulatorID = 1
                        },
                        new
                        {
                            ID = 3,
                            Category = "Pulpit operatora",
                            Name = "Włącznik wycieraczek (biały)",
                            SimulatorID = 1
                        },
                        new
                        {
                            ID = 4,
                            Category = "Pulpit operatora",
                            Name = "Przycisk (niebieski) – światła drogowe i pomocnicze „kierunek na łyżkę”",
                            SimulatorID = 1
                        },
                        new
                        {
                            ID = 5,
                            Category = "Pulpit operatora",
                            Name = "Przycisk (niebieski) – światła drogowe „kierunek na ciągnik”",
                            SimulatorID = 1
                        },
                        new
                        {
                            ID = 6,
                            Category = "Pulpit operatora",
                            Name = "Przycisk (żółty) – sygnały dźwiękowe",
                            SimulatorID = 1
                        },
                        new
                        {
                            ID = 7,
                            Category = "Pulpit sterowania układem roboczym",
                            Name = "Dźwignia rozdzielacza awaryjnego zasilania układu roboczego",
                            SimulatorID = 2
                        },
                        new
                        {
                            ID = 8,
                            Category = "Pulpit sterowania układem roboczym",
                            Name = "Dźwignia rozdzielacza podnoszenia wysięgnika dół/góra",
                            SimulatorID = 2
                        },
                        new
                        {
                            ID = 9,
                            Category = "Pulpit sterowania układem roboczym",
                            Name = "Dźwignia rozdzielacza skręt wysięgnika prawo/lewo",
                            SimulatorID = 2
                        },
                        new
                        {
                            ID = 10,
                            Category = "Pulpit sterowania układem roboczym",
                            Name = "Dźwignia rozdzielacza podpora lewa góra/dół",
                            SimulatorID = 2
                        },
                        new
                        {
                            ID = 11,
                            Category = "Pulpit sterowania układem roboczym",
                            Name = "Dźwignia rozdzielacza podpora prawa góra/dół",
                            SimulatorID = 2
                        },
                        new
                        {
                            ID = 12,
                            Category = "Pulpit sterowania układem roboczym",
                            Name = "Dźwignia rozdzielacza podpory tylne góra/dół",
                            SimulatorID = 2
                        },
                        new
                        {
                            ID = 13,
                            Category = "Pulpit sterowania układem roboczym",
                            Name = "Dźwignia rozdzielacza zwijak kabla elektrycznego",
                            SimulatorID = 2
                        },
                        new
                        {
                            ID = 14,
                            Category = "Pulpit sterowania układem roboczym",
                            Name = "Manometr hydrauliczny",
                            SimulatorID = 2
                        },
                        new
                        {
                            ID = 15,
                            Category = "Stanowisko do wiercenia rozdzielacze hydrauliczne",
                            Name = "Udary w dół połowa (zawiercanie) / do góry pełne",
                            SimulatorID = 3
                        },
                        new
                        {
                            ID = 16,
                            Category = "Stanowisko do wiercenia rozdzielacze hydrauliczne",
                            Name = "Obroty w dół prawe / w górę lewe",
                            SimulatorID = 3
                        },
                        new
                        {
                            ID = 17,
                            Category = "Stanowisko do wiercenia rozdzielacze hydrauliczne",
                            Name = "Posuw wiertarki przód / tył",
                            SimulatorID = 3
                        },
                        new
                        {
                            ID = 18,
                            Category = "Stanowisko do wiercenia rozdzielacze hydrauliczne",
                            Name = "Przepłuczka w górę wodno / w dół powietrzna",
                            SimulatorID = 3
                        },
                        new
                        {
                            ID = 19,
                            Category = "Stanowisko do wiercenia rozdzielacze hydrauliczne",
                            Name = "Regulacja ciśnienia posuwu",
                            SimulatorID = 3
                        });
                });

            modelBuilder.Entity("SWO.Models.DataModels.SensorValue", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("SensorID")
                        .HasColumnType("int");

                    b.Property<int>("SimulationID")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("SensorID");

                    b.HasIndex("SimulationID");

                    b.ToTable("SensorValues");
                });

            modelBuilder.Entity("SWO.Models.DataModels.Simulation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("GradeSum")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("InstructorID")
                        .HasColumnType("int");

                    b.Property<int>("ScenarioID")
                        .HasColumnType("int");

                    b.Property<int>("TraineeID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("InstructorID");

                    b.HasIndex("ScenarioID");

                    b.HasIndex("TraineeID");

                    b.ToTable("Simulations");
                });

            modelBuilder.Entity("SWO.Models.DataModels.Simulator", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LocationID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("LocationID");

                    b.ToTable("Simulators");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Description = "Ładowarka znajdująca się w Lublinie",
                            LocationID = 2,
                            Name = "Ładowarka Lublin",
                            Type = 0
                        },
                        new
                        {
                            ID = 2,
                            Description = "Kotwiarka znajdująca się w Rudnie",
                            LocationID = 1,
                            Name = "Kotwiarka Rudna",
                            Type = 1
                        },
                        new
                        {
                            ID = 3,
                            Description = "Wiertnica znajdująca się w Lublinie",
                            LocationID = 2,
                            Name = "Wiertnica Lublin",
                            Type = 2
                        },
                        new
                        {
                            ID = 4,
                            Description = "Symulator VR LKP903 znajdujący się w Rudnicy",
                            LocationID = 1,
                            Name = "Symulator VR LKP903 Rudnica",
                            Type = 3
                        },
                        new
                        {
                            ID = 5,
                            Description = "Symulator VR SWKF znajdujący się w Lublinie",
                            LocationID = 2,
                            Name = "Symulator VR SWKF Lublin",
                            Type = 4
                        },
                        new
                        {
                            ID = 6,
                            Description = "Symulator VR SWW znajdujący się w  Rudnicy",
                            LocationID = 1,
                            Name = "Symulator VR SWW Rudnica",
                            Type = 5
                        });
                });

            modelBuilder.Entity("SWO.Models.DataModels.Trainee", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("Trainees");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SWO.Models.DataModels.Grade", b =>
                {
                    b.HasOne("SWO.Models.DataModels.Simulation", "Simulation")
                        .WithMany("Grades")
                        .HasForeignKey("SimulationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SWO.Models.DataModels.GradeTemplate", "GradeTemplate")
                        .WithMany("Grades")
                        .HasForeignKey("TemplateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GradeTemplate");

                    b.Navigation("Simulation");
                });

            modelBuilder.Entity("SWO.Models.DataModels.GradeTemplate", b =>
                {
                    b.HasOne("SWO.Models.DataModels.Simulator", "Simulator")
                        .WithMany("GradeTemplates")
                        .HasForeignKey("SimulatorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Simulator");
                });

            modelBuilder.Entity("SWO.Models.DataModels.Instructor", b =>
                {
                    b.HasOne("SWO.Models.DataModels.Member", "User")
                        .WithOne("Instructor")
                        .HasForeignKey("SWO.Models.DataModels.Instructor", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SWO.Models.DataModels.Scenario", b =>
                {
                    b.HasOne("SWO.Models.DataModels.Simulator", "Simulator")
                        .WithMany("Scenarios")
                        .HasForeignKey("SimulatorID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Simulator");
                });

            modelBuilder.Entity("SWO.Models.DataModels.ScenarioGradesTemplates", b =>
                {
                    b.HasOne("SWO.Models.DataModels.Scenario", "Scenario")
                        .WithMany("ScenarioTemplate")
                        .HasForeignKey("ScenarioID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SWO.Models.DataModels.GradeTemplate", "GradeTemplate")
                        .WithMany("ScenarioTemplate")
                        .HasForeignKey("TemplateID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GradeTemplate");

                    b.Navigation("Scenario");
                });

            modelBuilder.Entity("SWO.Models.DataModels.Sensor", b =>
                {
                    b.HasOne("SWO.Models.DataModels.Simulator", "Simulator")
                        .WithMany("Sensors")
                        .HasForeignKey("SimulatorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Simulator");
                });

            modelBuilder.Entity("SWO.Models.DataModels.SensorValue", b =>
                {
                    b.HasOne("SWO.Models.DataModels.Sensor", "Sensor")
                        .WithMany("SensorValues")
                        .HasForeignKey("SensorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SWO.Models.DataModels.Simulation", "Simulation")
                        .WithMany()
                        .HasForeignKey("SimulationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sensor");

                    b.Navigation("Simulation");
                });

            modelBuilder.Entity("SWO.Models.DataModels.Simulation", b =>
                {
                    b.HasOne("SWO.Models.DataModels.Instructor", "Instructor")
                        .WithMany("Simulations")
                        .HasForeignKey("InstructorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SWO.Models.DataModels.Scenario", "Scenario")
                        .WithMany("Simulations")
                        .HasForeignKey("ScenarioID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SWO.Models.DataModels.Trainee", "Trainee")
                        .WithMany("Simulations")
                        .HasForeignKey("TraineeID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Instructor");

                    b.Navigation("Scenario");

                    b.Navigation("Trainee");
                });

            modelBuilder.Entity("SWO.Models.DataModels.Simulator", b =>
                {
                    b.HasOne("SWO.Models.DataModels.Location", "Location")
                        .WithMany("Simulators")
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("SWO.Models.DataModels.Trainee", b =>
                {
                    b.HasOne("SWO.Models.DataModels.Member", "User")
                        .WithOne("Trainee")
                        .HasForeignKey("SWO.Models.DataModels.Trainee", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SWO.Models.DataModels.GradeTemplate", b =>
                {
                    b.Navigation("Grades");

                    b.Navigation("ScenarioTemplate");
                });

            modelBuilder.Entity("SWO.Models.DataModels.Instructor", b =>
                {
                    b.Navigation("Simulations");
                });

            modelBuilder.Entity("SWO.Models.DataModels.Location", b =>
                {
                    b.Navigation("Simulators");
                });

            modelBuilder.Entity("SWO.Models.DataModels.Member", b =>
                {
                    b.Navigation("Instructor");

                    b.Navigation("Trainee");
                });

            modelBuilder.Entity("SWO.Models.DataModels.Scenario", b =>
                {
                    b.Navigation("ScenarioTemplate");

                    b.Navigation("Simulations");
                });

            modelBuilder.Entity("SWO.Models.DataModels.Sensor", b =>
                {
                    b.Navigation("SensorValues");
                });

            modelBuilder.Entity("SWO.Models.DataModels.Simulation", b =>
                {
                    b.Navigation("Grades");
                });

            modelBuilder.Entity("SWO.Models.DataModels.Simulator", b =>
                {
                    b.Navigation("GradeTemplates");

                    b.Navigation("Scenarios");

                    b.Navigation("Sensors");
                });

            modelBuilder.Entity("SWO.Models.DataModels.Trainee", b =>
                {
                    b.Navigation("Simulations");
                });
#pragma warning restore 612, 618
        }
    }
}
