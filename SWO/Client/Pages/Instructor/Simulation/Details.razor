@page "/instructor/simulation/{simulationID:int}"
@attribute [Authorize(Roles = "Instructor")]
@inject HttpClient http
@inject IJSRuntime js
<h3>@ViewResources.Simulator</h3>
<br>
@if (simulator == null)
{
    <Loading />
}
else
{
    <RadzenTabs>
        <Tabs>
            <Radzen.Blazor.RadzenTabsItem Text="@ViewResources.User">
                <RadzenCard class="mat-elevation-z5" Style="width:600px; margin-bottom: 20px; height:500px;">
                    <div class="row">
                        <div class="col-md-6">
                            <div>@ModelResources.Identifier</div>
                            <b>@simulator.ID</b>
                            <div style="margin-top:20px">@ModelResources.Name:</div>
                            <b>@simulator.Name</b>
                            <div style="margin-top:20px">@ModelResources.Type</div>
                            <b>@simulator.Type.GetDescription()</b>
                            <br />
                        </div>
                        <div class="col-md-6">
                            <div>@ModelResources.Location</div>
                            <b>
                                <a href="admin/location/details/@simulator.LocationID">
                                    @simulator.LocationName
                                </a>
                            </b>
                        </div>
                    </div>
                </RadzenCard>
            </Radzen.Blazor.RadzenTabsItem>
            @if (!string.IsNullOrEmpty(simulator.Description))
            {
                <Radzen.Blazor.RadzenTabsItem Text="@ModelResources.Description">
                    <RadzenCard class="mat-elevation-z5" Style="width:600px; margin-bottom: 20px; height:500px;">
                        <p>@simulator.Description</p>
                    </RadzenCard>
                </Radzen.Blazor.RadzenTabsItem>
            }
            @if (sensors.Count > 0)
            {
                <Radzen.Blazor.RadzenTabsItem Text="@ViewResources.Sensors">
                    <RadzenCard class="mat-elevation-z5" Style="width:600px; margin-bottom: 20px; height:500px;">
                        <RadzenGrid Data="@sensors"
                                    AllowFiltering="true" AllowPaging="true" AllowSorting="true" TItem="SensorViewModel" ColumnWidth="200px">
                            <Columns>
                                <RadzenGridColumn TItem="SensorViewModel" Property="Name" Title="@ModelResources.Name" />
                                <RadzenGridColumn TItem="SensorViewModel" Property="Category" Title="@ModelResources.Category" />
                            </Columns>
                        </RadzenGrid>
                    </RadzenCard>
                </Radzen.Blazor.RadzenTabsItem>
            }
            @if (sensors.Count > 0)
            {
                <Radzen.Blazor.RadzenTabsItem Text="@ViewResources.GradeTemplates">
                    <RadzenCard class="mat-elevation-z5" Style="width:600px; margin-bottom: 20px; height:500px;">
                        <RadzenGrid Data="@gradeTemplates"
                                    AllowFiltering="true" AllowPaging="true" AllowSorting="true" TItem="GradeTemplateViewModel" ColumnWidth="200px">
                            <Columns>
                                <RadzenGridColumn TItem="GradeTemplateViewModel" Property="Name" Title="@ModelResources.Name" />
                                <RadzenGridColumn TItem="GradeTemplateViewModel" Property="Description" Title="@ModelResources.Description" />
                                <RadzenGridColumn TItem="GradeTemplateViewModel" Property="MaxPoints" Title="@ModelResources.MaxPoints" Width="30px" />
                                <RadzenGridColumn TItem="GradeTemplateViewModel" Property="Phase" Title="@ModelResources.Phase" Width="30px" />
                            </Columns>
                        </RadzenGrid>
                    </RadzenCard>
                </Radzen.Blazor.RadzenTabsItem>
            }
        </Tabs>
    </RadzenTabs>
}
@code {
    [Parameter] public int simulatorID { get; set; }
    SimulatorLocationCombinedModel simulator { get; set; }
    List<GradeTemplateViewModel> gradeTemplates { get; set; }
    List<SensorViewModel> sensors { get; set; }

    protected override async Task OnInitializedAsync()
    {
        simulator = await http.GetFromJsonAsync<SimulatorLocationCombinedModel>($"api/simulator/{simulatorID}/location");
        gradeTemplates = await http.GetFromJsonAsync<List<GradeTemplateViewModel>>($"api/gradetemplate/simulator/{simulatorID}");
        sensors = await http.GetFromJsonAsync<List<SensorViewModel>>($"api/sensor/simulator/{simulatorID}");
    }
}